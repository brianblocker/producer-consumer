var expect   = require('chai').expect;
var Producer = require('./index');
var sinon    = require('sinon');

describe('Producer', function () {
  describe('instantiation', function () {
    it('calls #setOptions', function () {
      var spy = sinon.spy(Producer.prototype, 'setOptions');

      new Producer();

      expect(spy.called).to.be.true;

      spy.restore();
    });

    it('passes the options object to #setOptions', function () {
      var spy = sinon.spy(Producer.prototype, 'setOptions');

      new Producer({joe: 'mama'});

      expect(spy.args[0][0].joe).to.equal('mama');

      spy.restore();
    });
  });

  describe('#setOptions', function () {
    it('creates this.options', function () {
      var mock = {};

      Producer.prototype.setOptions.call(mock);

      expect(mock.options).to.exist;
    });

    it('sets this.options.max to 1000 by default', function () {
      var mock = {};

      Producer.prototype.setOptions.call(mock);

      expect(mock.options.max).to.equal(1000);
    });

    it('sets this.options.max to the value passed in', function () {
      var mock = {};

      Producer.prototype.setOptions.call(mock, {max: 50});

      expect(mock.options.max).to.equal(50);
    });

    it('sets this.options.total to 2 by default', function () {
      var mock = {};

      Producer.prototype.setOptions.call(mock);

      expect(mock.options.total).to.equal(2);
    });

    it('can set this.options.total to another value', function () {
      var mock = {};

      Producer.prototype.setOptions.call(mock, {total: 3});

      expect(mock.options.total).to.equal(3);
    });

    it('sets this.options.operator to + by default', function () {
      var mock = {};

      Producer.prototype.setOptions.call(mock);

      expect(mock.options.operator).to.equal('+');
    });

    it('can set this.options.operator to another valid value', function () {
      var mock = {};

      Producer.prototype.setOptions.call(mock, {operator: '-'});

      expect(mock.options.operator).to.equal('-');
    });
  });

  describe('#generateEquation', function () {
    it('calls #generateInteger', function () {
      var spy      = sinon.spy(Producer, 'generateInteger');
      var producer = new Producer();
      var equation = producer.generateEquation();

      expect(spy.called).to.equal(true);

      spy.restore();
    });

    it('generates an equation', function () {
      var producer = new Producer();
      var equation = producer.generateEquation();

      expect(/^\d+\+\d+=$/.test(equation)).to.be.true;
    });

    it('generates an equation with 3 operands', function () {
      var producer = new Producer({total: 3});
      var equation = producer.generateEquation();

      expect(/^\d+\+\d+\+\d+=$/.test(equation)).to.be.true;
    });

    it('generates an equation with the specified operator', function () {
      var producer = new Producer({operator: '-'});
      var equation = producer.generateEquation();

      expect(/^\d+\-\d+=$/.test(equation)).to.be.true;
    });
  });

  describe('.generateInteger', function () {
    it('returns a number', function () {
      var result = Producer.generateInteger();

      expect(result).to.be.a('number');
    });
  });

  describe('.ensureProperOperator', function () {
    it('returns a + by default', function () {
      var operator = Producer.ensureProperOperator();

      expect(operator).to.equal('+');
    });


    it('returns valid operators', function () {
      var operator_minus    = Producer.ensureProperOperator('-');
      var operator_plus     = Producer.ensureProperOperator('+');
      var operator_multiply = Producer.ensureProperOperator('*');

      expect(operator_minus).to.equal('-');
      expect(operator_plus).to.equal('+');
      expect(operator_multiply).to.equal('*');
    });

    it('returns the default operator when an invalid value is passed in', function () {
      var bad_operator = Producer.ensureProperOperator('%');

      expect(bad_operator).to.equal('+');
    });
  });
});
