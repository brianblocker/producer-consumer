var expect   = require('chai').expect;
var sinon    = require('sinon');
var fs       = require('fs');
var winston  = require('winston');
var Consumer = require('./index');

describe('Consumer', function () {
  afterEach(function () {
    Consumer.cache = Object.create(null);
    Consumer.logs  = [];
  });

  describe('#insertIntoCache', function () {
    it('inserts result into cache, keyed by the equation', function () {
      var equation = "2+3=";
      var result     = 5;

      Consumer.prototype.insertIntoCache(equation, result);

      expect(Consumer.cache[equation]).to.equal(result);
    });
  });

  describe('#getFromCache', function () {
    it('returns the result when present', function () {
      var equation = "2+2=";
      var result   = 4;
      var cached;

      Consumer.prototype.insertIntoCache(equation, result);

      cached = Consumer.prototype.getFromCache(equation);

      expect(cached).to.equal(result);
    });

    it('returns undefined when result is not present', function () {
      var cached = Consumer.prototype.getFromCache('1+1=');

      expect(cached).not.to.exist;
    });
  });

  describe('#validateEquation', function () {
    it('validates 2 operand equations', function () {
      var equations = [
        '2+2=', '2+7=', '0+8=', '15153+23=', '234235+254634=',
        '2*2=', '2*7=', '0*8=', '15153*23=', '234235*254634=',
        '2-2=', '2-7=', '0-8=', '15153-23=', '234235-254634=',
      ];

      equations.forEach(function (equation) {
        expect(Consumer.prototype.validateEquation(equation)).to.be.true;
      });
    });

    it('validates 3 operand equations', function () {
      var equations = [
        '2+2+5=', '2+7+5=', '0+8+5=', '15153+23+5=', '234235+254634+5=',
        '2*2*5=', '2*7*5=', '0*8*5=', '15153*23*5=', '234235*254634*5=',
        '2-2-5=', '2-7-5=', '0-8-5=', '15153-23-5=', '234235-254634-5=',
      ];

      equations.forEach(function (equation) {
        expect(Consumer.prototype.validateEquation(equation)).to.be.true;
      });
    });

    it('validates 5+ operand equations', function () {
      var equations = [
        '2+3+5+4+6=', '2+3+5+4+6+22+1616+7+2+1634257+23+7='
      ];

      equations.forEach(function (equation) {
        expect(Consumer.prototype.validateEquation(equation)).to.be.true;
      });
    });

    it('rejects bad equations', function () {
      var bad_equations = [
        '-2+5=', 'alphapig', '', 7, '8++7=', undefined
      ];

      bad_equations.forEach(function (equation) {
        expect(Consumer.prototype.validateEquation(equation)).to.be.false;
      });
    });
  });

  describe('#evaluateEquation', function () {
    it('correctly evaluates addition equations with two operators', function () {
      var result = Consumer.prototype.evaluateEquation('2+3=');

      expect(result).to.equal(5);
    });

    it('correctly evaluates addition equations with multiple operators', function () {
      var result = Consumer.prototype.evaluateEquation('2+7+1056+34=');

      expect(result).to.equal(1099);
    });

    it('correctly evaluates subtraction equations with two operators', function () {
      var result = Consumer.prototype.evaluateEquation('3-2=');

      expect(result).to.equal(1);
    });

    it('correctly evaluates subtraction equations with multiple operators', function () {
      var result = Consumer.prototype.evaluateEquation('102-2-7-25=');

      expect(result).to.equal(68);
    });

    it('correctly evaluates multiplication equations with two operators', function () {
      var result = Consumer.prototype.evaluateEquation('2*3=');

      expect(result).to.equal(6);
    });

    it('correctly evaluates multiplication equations with multiple operators', function () {
      var result = Consumer.prototype.evaluateEquation('2*25*10*10=');

      expect(result).to.equal(5000);
    });
  });

  describe('#getResult', function () {
    beforeEach(function () {
      this.consumer = new Consumer();

      this.good_equation   = '2+3=';
      this.equation_result = 5;
      this.bad_equation    = 'Balsamiq';
    });

    it('calls #validateEquation', function () {
      var spy = sinon.spy(Consumer.prototype, 'validateEquation');

      this.consumer.getResult(this.good_equation);

      expect(spy.args[0][0]).to.equal(this.good_equation);

      spy.restore();
    });

    it('calls #evaluateEquation', function () {
      var spy = sinon.spy(Consumer.prototype, 'evaluateEquation');

      this.consumer.getResult(this.good_equation);

      expect(spy.args[0][0]).to.equal(this.good_equation);

      spy.restore();
    });

    it('returns "invalid equation" if #validateEquation fails', function () {
      var result = this.consumer.getResult(this.bad_equation);

      expect(result).to.equal('invalid equation');
    });

    it('returns the result of #evaluateEquation', function () {
      var result = this.consumer.getResult(this.good_equation);

      expect(result).to.equal(this.equation_result);
    });
  });

  describe('#handleRequest', function () {
    beforeEach(function () {
      this.consumer = new Consumer();

      this.good_equation   = '2+3=';
      this.equation_result = 5;
      this.cached_equation = '5+6=';
      this.cached_result   = 11;
      this.bad_equation    = 'Balsamiq';

      Consumer.cache[this.cached_equation] = this.cached_result;
    });

    it('calls #getFromCache, passing the equation', function () {
      var spy = sinon.spy(Consumer.prototype, 'getFromCache');

      this.consumer.handleRequest(this.good_equation);

      expect(spy.args[0][0]).to.equal(this.good_equation);

      spy.restore();
    });

    it('calls #getResult, passing the equation, if result is not cached', function () {
      var spy = sinon.spy(Consumer.prototype, 'getResult');

      this.consumer.handleRequest(this.good_equation);

      expect(spy.args[0][0]).to.equal(this.good_equation);

      spy.restore();
    });

    it('does NOT call #getResult if the equation is cached', function () {
      var spy = sinon.spy(Consumer.prototype, 'getResult');

      this.consumer.handleRequest(this.cached_equation);

      expect(spy.called).to.equal(false);

      spy.restore();
    });

    it('does NOT call #insertIntoCache if the equation is cached', function () {
      var spy = sinon.spy(Consumer.prototype, 'insertIntoCache');

      this.consumer.handleRequest(this.cached_equation);

      expect(spy.called).to.equal(false);

      spy.restore();
    });

    it('calls #insertIntoCache, passing result', function () {
      var spy = sinon.spy(Consumer.prototype, 'insertIntoCache');

      this.consumer.handleRequest(this.good_equation);

      expect(spy.args[0][0]).to.equal(this.equation_result);

      spy.restore();
    });

    it('returns the result when result is already cached', function () {
      var result = this.consumer.handleRequest(this.cached_equation);

      expect(result).to.equal(this.cached_result);
    });

    it('returns the result when result is NOT cached', function () {
      var result = this.consumer.handleRequest(this.good_equation);

      expect(result).to.equal(this.equation_result);
    });
  });
});
